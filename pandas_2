# vactorized operation and series indexes

import pandas as pd
# #Addition when indexes are the same
# s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
# s2 = pd.Series([10, 20, 30, 40], index=['a', 'b', 'c', 'd'])
# print (s1 + s2)
# output:
# a    11
# b    22
# c    33
# d    44
# dtype: int64

##Indexes have same elements in a different order##aadd with the order
# s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
# s2 = pd.Series([10, 20, 30, 40], index=['b', 'd', 'a', 'c'])
# print (s1 + s2)

# output:
# a    31
# b    12
# c    43
# d    24
# dtype: int64

##Indexes overlap, but do not have exactly the same elements
s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
s2 = pd.Series([10, 20, 30, 40], index=['c', 'd', 'e', 'f'])
# print (s1 + s2)

# output:
# a     NaN
# b     NaN
# c    13.0
# d    24.0
# e     NaN
# f     NaN
# dtype: float64

sum_result = s1 + s2
print (sum_result.dropna())#####use dropna()





#Indexes do not overlap
s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
s2 = pd.Series([10, 20, 30, 40], index=['e', 'f', 'g', 'h'])
print (s1 + s2)

a   NaN
b   NaN
c   NaN
d   NaN
e   NaN
f   NaN
g   NaN
h   NaN
dtype: float64
-------------------------------------------------------

#####apply () founction  takes a new series and a function, and returns a new series.

import pandas as pd
t = pd.Series([5,6,7,8])
s = pd.Series([1,2,3,4])
def add_one(x):
	return x+1
print (s.apply(add_one))
print (t.apply(add_one))
